/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package @APP_PACKAGE@.channels;

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.content.ContentUris;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.PersistableBundle;
import android.support.annotation.NonNull;
import android.support.media.tv.Channel;
import android.support.media.tv.PreviewProgram;
import android.support.media.tv.TvContractCompat;
import android.support.media.tv.WatchNextProgram;
import android.util.Log;

import @APP_PACKAGE@.Splash;
import @APP_PACKAGE@.XBMCJsonRPC;
import @APP_PACKAGE@.model.Movie;
import @APP_PACKAGE@.model.TVEpisode;
import @APP_PACKAGE@.model.TVShow;
import @APP_PACKAGE@.model.File;
import @APP_PACKAGE@.model.Media;
import @APP_PACKAGE@.channels.model.Subscription;
import @APP_PACKAGE@.channels.model.XBMCDatabase;
import @APP_PACKAGE@.channels.util.TvUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Syncs programs for a channel. A channel id is required to be passed via the {@link
 * JobParameters}. This service is scheduled to listen to changes to a channel. Once the job
 * completes, it will reschedule itself to listen for the next change to the channel. See {@link
 * TvUtil#scheduleTriggeredSyncingProgramsForChannel(Context, long)} for more details about the scheduling.
 */

 public class SyncProgramsJobService extends JobService {

     private static final String TAG = "SyncProgramsJobService";

     private static SyncProgramsTask mSyncProgramsTask;

     @Override
     public boolean onStartJob(final JobParameters jobParameters) {
         Log.d(TAG, "onStartJob(): " + jobParameters);

         final long channelId = getChannelId(jobParameters);
         if (channelId == -1L) {
             return false;
         }
         Log.d(TAG, "onStartJob(): Scheduling syncing for programs for channel " + channelId);

         mSyncProgramsTask =
                 new SyncProgramsTask(getApplicationContext()) {
                     @Override
                     protected void onPostExecute(Boolean finished) {
                         super.onPostExecute(finished);
                         // Daisy chain listening for the next change to the channel.
                         TvUtil.scheduleTriggeredSyncingProgramsForChannel(
                                 SyncProgramsJobService.this, channelId);
                         mSyncProgramsTask = null;
                         jobFinished(jobParameters, !finished);
                     }
                 };
         mSyncProgramsTask.execute(channelId);

         return true;
     }

     @Override
     public boolean onStopJob(JobParameters jobParameters) {
         Log.d(TAG, "onStopJob: starts");
         if (mSyncProgramsTask != null) {
             mSyncProgramsTask.cancel(true);
         }
         return true;
     }

     private long getChannelId(JobParameters jobParameters) {
         Log.d(TAG, "getChannelId: starts");
         PersistableBundle extras = jobParameters.getExtras();
         if (extras == null) {
             return -1L;
         }

         return extras.getLong(TvContractCompat.EXTRA_CHANNEL_ID, -1L);
     }

     private class SyncProgramsTask extends AsyncTask<Long, Void, Boolean> {

         private final Context mContext;

         private SyncProgramsTask(Context context) {
             this.mContext = context;
         }

         @Override
         protected Boolean doInBackground(Long... channelIds) {
             Log.d(TAG, "SyncProgramsJobService doInBackground: starts");
             XBMCJsonRPC json = new XBMCJsonRPC();
             if (!json.Ping())
                 return false;
             json = null;

             List<Long> params = Arrays.asList(channelIds);
             if (!params.isEmpty()) {
                 for (Long channelId : params) {
                     Subscription subscription =
                             XBMCDatabase.findSubscriptionByChannelId(mContext, channelId);
                     if (subscription != null) {
                         List<Media> cachedMedias = XBMCDatabase.getMedias(mContext, channelId);
                         XBMCDatabase.removeMedias(mContext, 75);
                         boolean isPlayNext = subscription.isAddToPlayNext();
                         String category = subscription.getCategory();
                         Log.d(TAG, "doInBackground: cachedMedias.size: " + cachedMedias.size());
                         syncPrograms(mContext, channelId, category, isPlayNext, subscription.getUri(), cachedMedias);
                     }
                 }
             }
             return true;
         }

         /*
          * Syncs programs by querying the given channel id.
          *
          * If the channel is not browsable, the programs will be removed to avoid showing
          * stale programs when the channel becomes browsable in the future.
          *
          * If the channel is browsable, then it will check if the channel has any programs.
          *      If the channel does not have any programs, new programs will be added.
          *      If the channel does have programs, then a fresh list of programs will be fetched and the
          *          channel's programs will be updated.
          */
         private void syncPrograms(Context ctx, long channelId, String category, boolean isPlayNext, String uri, List<Media> initialMedias) {
             Log.d(TAG, "Sync programs for channel: " + channelId);
             List<Media> medias = new ArrayList<>(initialMedias);

             try (Cursor cursor =
                          getContentResolver()
                                  .query(
                                          TvContractCompat.buildChannelUri(channelId),
                                          null,
                                          null,
                                          null,
                                          null)) {
                 if (cursor != null && cursor.moveToNext()) {
                     Channel channel = Channel.fromCursor(cursor);

                     XBMCJsonRPC jsonrpc = new XBMCJsonRPC();
                     if (uri.isEmpty()) {
                         // Suggestion channel
                         Log.d(TAG, "Suggestion channel is browsable: " + channelId);

                         deletePrograms(channelId, medias);
                         medias = createPrograms(channelId, category, isPlayNext, jsonrpc.getSuggestions(ctx));
                     } else {
                         Log.d(TAG, "Channel is browsable: " + channelId);

                         String xbmcURL = Uri.parse(uri).getFragment();
                         List<File> files = jsonrpc.getFiles(xbmcURL);

                         deletePrograms(channelId, medias);
                         List<Media> mediasToCreate = jsonrpc.getMedias(ctx, files);
                         for (Media media : mediasToCreate) {
                             Log.d(TAG, "syncPrograms: media.toString: " + media.toString());
                         }
                         if (isPlayNext) {
                             Collections.reverse(mediasToCreate);
                         }
                         medias = createPrograms(channelId, category, isPlayNext, mediasToCreate);
                     }
                     jsonrpc = null;
                 }
                 XBMCDatabase.saveMedias(getApplicationContext(), channelId, medias);
             }
         }

         private List<Media> createPrograms(long channelId, String category, boolean isPlayNext, List<Media> medias) {
             Log.d(TAG, "createPrograms: starts");
             List<Media> mediasAdded = new ArrayList<>(medias.size());
             Log.d(TAG, "createPrograms: mediasAdded: " + mediasAdded.toString() + "size: " + medias.size());
             for (Media media : medias) {
                 Log.d(TAG, "createPrograms: media in for lopp: " + media.toString());
                 if (isPlayNext) {
                     Log.d(TAG, "createPrograms: before check");
                     if (media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE)
                             && category.equals(Subscription.SUBSCRIPTION_TYPE_ON_DECK)) {
                         Log.d(TAG, "createPrograms: after check");
                         TVEpisode tvEpisode = (TVEpisode) media;
                         if (tvEpisode.getPosition() <= 60000) {
                             WatchNextProgram watchNextProgram = buildWatchNextProgram(channelId, isPlayNext, media);
                             Uri programUri =
                                     getContentResolver()
                                             .insert(
                                                     TvContractCompat.WatchNextPrograms.CONTENT_URI,
                                                     watchNextProgram.toContentValues());
                             long programId = ContentUris.parseId(programUri);
                             Log.d(TAG, "Inserted new program: " + programId);
                             Log.d(TAG, "medias.size(): " + medias.size());
                             media.setProgramId(programId);
                             mediasAdded.add(media);

                             Log.d(TAG, "createPrograms: " + media.toString());
                         }

                     } else {
                         WatchNextProgram watchNextProgram = buildWatchNextProgram(channelId, isPlayNext, media);
                         Uri programUri =
                                 getContentResolver()
                                         .insert(
                                                 TvContractCompat.WatchNextPrograms.CONTENT_URI,
                                                 watchNextProgram.toContentValues());
                         long programId = ContentUris.parseId(programUri);
                         Log.d(TAG, "Inserted new program: " + programId);
                         Log.d(TAG, "medias.size(): " + medias.size());
                         media.setProgramId(programId);
                         mediasAdded.add(media);
                     }

                 } else {
                     PreviewProgram previewProgram = buildProgram(channelId, isPlayNext, media);
                     Uri programUri =
                             getContentResolver()
                                     .insert(
                                             TvContractCompat.PreviewPrograms.CONTENT_URI,
                                             previewProgram.toContentValues());
                     long programId = ContentUris.parseId(programUri);
                     Log.d(TAG, "Inserted new program: " + programId);
                     Log.d(TAG, "Inserted new program: " + media.toString());
                     Log.d(TAG, "medias.size(): " + medias.size());
                     media.setProgramId(programId);
                     mediasAdded.add(media);
                 }
             }
             return mediasAdded;
         }

         private void deletePrograms(long channelId, List<Media> medias) {
             Log.d(TAG, "deletePrograms: starts");
             if (medias.isEmpty()) {
                 return;
             }

             int previewCount = 0;
             for (Media media : medias) {
                 previewCount +=
                         getContentResolver()
                                 .delete(
                                         TvContractCompat.buildPreviewProgramUri(media.getProgramId()),
                                         null,
                                         null);
             }
             Log.d(TAG, "Deleted " + previewCount + " programs for  channel " + channelId);

             int watchNextCount = 0;
             for (Media media : medias) {
                 watchNextCount +=
                         getContentResolver()
                                 .delete(
                                         TvContractCompat.buildWatchNextProgramUri(media.getProgramId()),
                                         null,
                                         null);
             }
             Log.d(TAG, "Deleted " + watchNextCount + " programs for  channel " + channelId);


             // Remove our local records to stay in sync with the TV Provider.
             XBMCDatabase.removeMedias(getApplicationContext(), channelId);
         }

         @NonNull
         private PreviewProgram buildProgram(long channelId, boolean isPlayNext, Media media) {
             Log.d(TAG, "buildProgram: starts");
             Intent detailsIntent = new Intent(mContext, Splash.class);
             detailsIntent.setAction(Intent.ACTION_GET_CONTENT);
             detailsIntent.setData(Uri.parse(media.getXbmcUrl()));

             PreviewProgram.Builder builder = new PreviewProgram.Builder();
             builder.setChannelId(channelId)
                     .setTitle(media.getTitle())
                     .setIntent(detailsIntent);

             if (media.getCategory().equals(Media.MEDIA_TYPE_MOVIE)) {
                 Movie movie = new Movie();
                 movie = (Movie) media;
                 builder.setDescription(movie.getPlot())
                         .setReleaseDate(movie.getYear())
                         .setDurationMillis(movie.getDuration())
                         .setLastPlaybackPositionMillis(movie.getPosition())
                         .setType(TvContractCompat.PreviewProgramColumns.TYPE_MOVIE);

                         if (movie.getRating() > 0) {
                             builder.setReviewRating(String.valueOf(movie.getRating() * 0.5))
                                     .setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);

                         }

                 Log.d(TAG, "buildProgram: movie.toString = " + movie.toString());

                 if (movie.getHasLandscapeArt()) {
                     if (movie.getLandscapeImageUrl() != null && movie.getRating() >= 8.5) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getLandscapeImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (movie.getThumbnailImageUrl() != null && movie.getRating() >= 8.5) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getThumbnailImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (movie.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }

                 } else {
                     if (movie.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 }

             } else if (media.getCategory().equals(Media.MEDIA_TYPE_TVSHOW)) {
                 TVShow tvShow = new TVShow();
                 tvShow = (TVShow) media;
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_SERIES)
                         .setLongDescription(tvShow.getPlot());

                         if (tvShow.getRating() > 0) {
                             builder.setReviewRating(String.valueOf(tvShow.getRating() * 0.5))
                                     .setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);

                         }

                 Log.d(TAG, "buildProgram: tvshow.toString = " + tvShow.toString());

                 if (tvShow.getHasLandscapeArt()) {
                     if (tvShow.getLandscapeImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVShow) media).getLandscapeImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvShow.getThumbnailImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVShow) media).getThumbnailImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvShow.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVShow) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 } else {
                     if (tvShow.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVShow) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 }

                 int numberOfSeasons = tvShow.getSeason();
                 builder.setDescription(tvShow.getPlot());

             } else if (media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE)) {
                 TVEpisode tvEpisode = new TVEpisode();
                 tvEpisode = (TVEpisode) media;
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_EPISODE)
                         .setEpisodeTitle(tvEpisode.getEpisodeTitle())
                         .setEpisodeNumber(tvEpisode.getEpisode())
                         .setSeasonNumber(tvEpisode.getSeason())
                         .setDescription(tvEpisode.getPlot())
                         .setDurationMillis(tvEpisode.getRuntime())
                         .setReleaseDate(tvEpisode.getYear());

                         if (tvEpisode.getRating() > 0) {
                             builder.setReviewRating(String.valueOf(tvEpisode.getRating() * 0.5))
                                     .setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);
                         }

                 if (tvEpisode.getHasLandscapeArt()) {
                     if (tvEpisode.getLandscapeImageUrl() != null && tvEpisode.getRating() >= 8.0) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getLandscapeImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvEpisode.getThumbnailImageUrl() != null && tvEpisode.getRating() >= 8.0) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getThumbnailImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvEpisode.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 } else {
                     if (tvEpisode.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getPosterImageUrl()));
                     } else if (tvEpisode.getTvShowPosterImagerUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getTvShowPosterImagerUrl()));
                     }
                     builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                 }

             } else if (media.getCategory().equals(Media.MEDIA_TYPE_ALBUM))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_ALBUM);
             else if (media.getCategory().equals(Media.MEDIA_TYPE_SONG))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TRACK);
             else if (media.getCategory().equals(Media.MEDIA_TYPE_MUSICVIDEO))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_CLIP);


             if (!media.getCategory().equals(Media.MEDIA_TYPE_MOVIE)
                     && !media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE)
                     && !media.getCategory().equals(Media.MEDIA_TYPE_TVSHOW)) {
                 if (media.getCardImageUrl() != null) {
                     builder.setPosterArtUri(Uri.parse(media.getCardImageUrl()));
                     if (media.getCardImageAspectRatio().equals("2:3"))
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     else if (media.getCardImageAspectRatio().equals("1:1"))
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_1_1);
                     else
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                 } else if (media.getBackgroundImageUrl() != null) {
                     builder.setPosterArtUri(Uri.parse(media.getBackgroundImageUrl()));
                     builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                 }
                 if (media.getVideoUrl() != null)
                     builder.setPreviewVideoUri(Uri.parse(media.getVideoUrl()));
             }

             return builder.build();
         }

         @NonNull
         private WatchNextProgram buildWatchNextProgram(long channelId, boolean isPlayNext, Media media) {
             Log.d(TAG, "buildWatchNextProgram: starts");
             Intent detailsIntent = new Intent(mContext, Splash.class);
             detailsIntent.setAction(Intent.ACTION_GET_CONTENT);
             detailsIntent.setData(Uri.parse(media.getXbmcUrl()));

             WatchNextProgram.Builder builder = new WatchNextProgram.Builder();
             builder.setTitle(media.getTitle())
                     .setIntent(detailsIntent);

             if (media.getCategory().equals(Media.MEDIA_TYPE_MOVIE)) {
                 Movie movie = new Movie();
                 movie = (Movie) media;
                 builder.setWatchNextType(TvContractCompat.WatchNextPrograms.WATCH_NEXT_TYPE_CONTINUE)
                         .setLastEngagementTimeUtcMillis(movie.getLastPlayed())
                         .setDescription(movie.getPlot())
                         .setReleaseDate(movie.getYear())
                         .setReviewRating(String.valueOf(movie.getRating() * 0.5))
                         .setDurationMillis(movie.getDuration())
                         .setLastPlaybackPositionMillis(movie.getPosition())
                         .setType(TvContractCompat.PreviewProgramColumns.TYPE_MOVIE);

                 Log.d(TAG, "buildWatchNextProgram: movie.toString = " + movie.toString());

                 if (movie.getHasLandscapeArt()) {
                     if (movie.getLandscapeImageUrl() != null && movie.getRating() >= 8.5) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getLandscapeImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (movie.getThumbnailImageUrl() != null && movie.getRating() >= 8.5) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getThumbnailImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (movie.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }

                 } else {
                     if (movie.getPosterImageUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((Movie) media).getPosterImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 }

 //            } else if (media.getCategory().equals(Media.MEDIA_TYPE_TVSHOW)) {
 //                TVShow tvShow = new TVShow();
 //                tvShow = (TVShow) media;
 //                builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_SERIES)
 //                        .setLongDescription(tvShow.getPlot());
 //
 //                Log.d(TAG, "buildProgram: tvshow.toString = " + tvShow.toString());
 //
 //                if (tvShow.getHasLandscapeArt()) {
 //                    if (tvShow.getLandscapeImageUrl() != null) {
 //                        builder.setPosterArtUri(Uri.parse(((TVShow) media).getLandscapeImageUrl()));
 //                        builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
 //                    } else if (tvShow.getThumbnailImageUrl() != null) {
 //                        builder.setPosterArtUri(Uri.parse(((TVShow) media).getThumbnailImageUrl()));
 //                        builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
 //                    } else if (tvShow.getPosterImageUrl() != null) {
 //                        builder.setPosterArtUri(Uri.parse(((TVShow) media).getPosterImageUrl()));
 //                        builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
 //                    }
 //                } else {
 //                    if (tvShow.getPosterImageUrl() != null) {
 //                        builder.setPosterArtUri(Uri.parse(((TVShow) media).getPosterImageUrl()));
 //                        builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
 //                    }
 //                }
 //
 //                int numberOfSeasons = tvShow.getSeason();
 //                builder.setDescription(tvShow.getPlot())
 //                        .setReviewRating(String.valueOf((double) tvShow.getRating() * 0.5));

             } else if (media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE)) {
                 TVEpisode tvEpisode = new TVEpisode();
                 tvEpisode = (TVEpisode) media;
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_EPISODE)
                         .setLastEngagementTimeUtcMillis(tvEpisode.getLastPlayed())
                         .setEpisodeTitle(tvEpisode.getEpisodeTitle())
                         .setEpisodeNumber(tvEpisode.getEpisode())
                         .setSeasonNumber(tvEpisode.getSeason())
                         .setReviewRating(String.valueOf((double) tvEpisode.getRating() * 0.5))
                         .setDescription(tvEpisode.getPlot())
                         .setDurationMillis(tvEpisode.getRuntime())
                         .setLastPlaybackPositionMillis(tvEpisode.getPosition())
                         .setReleaseDate(tvEpisode.getYear());

                 if (tvEpisode.getPosition() < 60000) {
                     builder.setWatchNextType(TvContractCompat.WatchNextPrograms.WATCH_NEXT_TYPE_NEXT);
                     builder.setLastEngagementTimeUtcMillis(tvEpisode.getReleaseDate());
                 } else {
                     builder.setWatchNextType(TvContractCompat.WatchNextPrograms.WATCH_NEXT_TYPE_CONTINUE);
                 }

                 if (tvEpisode.getHasLandscapeArt()) {
                     if (tvEpisode.getLandscapeImageUrl() != null && tvEpisode.getRating() >= 8.0) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getLandscapeImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvEpisode.getThumbnailImageUrl() != null && tvEpisode.getRating() >= 8.0) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getThumbnailImageUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                     } else if (tvEpisode.getTvShowPosterImagerUrl() != null) {
                         builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getTvShowPosterImagerUrl()));
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     }
                 } else {
                     if (tvEpisode.getTvShowPosterImagerUrl() != null) {
                          builder.setPosterArtUri(Uri.parse(((TVEpisode) media).getTvShowPosterImagerUrl()));
                     }
                     builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                 }

             } else if (media.getCategory().equals(Media.MEDIA_TYPE_ALBUM))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_ALBUM);
             else if (media.getCategory().equals(Media.MEDIA_TYPE_SONG))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TRACK);
             else if (media.getCategory().equals(Media.MEDIA_TYPE_MUSICVIDEO))
                 builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_CLIP);


             if (!media.getCategory().equals(Media.MEDIA_TYPE_MOVIE)
                     && !media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE)
                     && !media.getCategory().equals(Media.MEDIA_TYPE_TVSHOW)) {
                 if (media.getCardImageUrl() != null) {
                     builder.setPosterArtUri(Uri.parse(media.getCardImageUrl()));
                     if (media.getCardImageAspectRatio().equals("2:3"))
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
                     else if (media.getCardImageAspectRatio().equals("1:1"))
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_1_1);
                     else
                         builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                 } else if (media.getBackgroundImageUrl() != null) {
                     builder.setPosterArtUri(Uri.parse(media.getBackgroundImageUrl()));
                     builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
                 }
                 if (media.getVideoUrl() != null)
                     builder.setPreviewVideoUri(Uri.parse(media.getVideoUrl()));
             }

             return builder.build();
         }
     }
 }
